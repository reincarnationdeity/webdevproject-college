{"ast":null,"code":"import React from'react';import{jsx as _jsx}from\"react/jsx-runtime\";var previosu;var Lr3=function Lr3(){//Question 1\nvar length=0;var arithmeticalMean=prompt('Введите числа через запятую').split(',').filter(function(i){return typeof parseInt(i)==='number';}).map(function(i){length++;return Math.pow(parseInt(i),3);}).reduce(function(previousValue,currentValue,currentIndex,array){return previousValue+currentValue;})/length;console.log(arithmeticalMean);//Question 2\nvar coordinate1=Object.assign(prompt('Введите первую точку x,y через запятую').split(',')).map(function(i){return parseInt(i);});var coordinate2=Object.assign(prompt('Введите вторую точку x,y через запятую').split(',').map(function(i){return parseInt(i);}));var coordinate3=Object.assign(prompt('Введите третью точку x,y через запятую').split(',').map(function(i){return parseInt(i);}));console.log(coordinate1,coordinate2,coordinate3);function trianglePerimeterAndArea(point1,point2,point3){var a=distance(point1,point2);var b=distance(point2,point3);var c=distance(point3,point1);var p=(a+b+c)/2;var area=Math.sqrt(p*(p-a)*(p-b)*(p-c));return{perimeter:a+b+c,area:area};}function distance(point1,point2){return Math.sqrt(Math.pow(point2[0]-point1[0],2)+Math.pow(point2[1]-point1[1],2));}console.log(trianglePerimeterAndArea(coordinate1,coordinate2,coordinate3));//Question 3\nvar array=[5,123,43,22,66];console.log(array);console.log(array.sort(function(a,b){return a-b;}));return/*#__PURE__*/_jsx(\"div\",{});};export default Lr3;","map":{"version":3,"names":["React","previosu","Lr3","length","arithmeticalMean","prompt","split","filter","i","parseInt","map","Math","pow","reduce","previousValue","currentValue","currentIndex","array","console","log","coordinate1","Object","assign","coordinate2","coordinate3","trianglePerimeterAndArea","point1","point2","point3","a","distance","b","c","p","area","sqrt","perimeter","sort"],"sources":["C:/Users/reincarndeity/Documents/GitHub/webdevv/src/pages/LR3.jsx"],"sourcesContent":["import React from 'react';\r\n\r\nlet previosu\r\n\r\nconst Lr3 = () => {\r\n\r\n    //Question 1\r\n    let length = 0;\r\n    let arithmeticalMean = prompt('Введите числа через запятую').split(',').filter((i)=>typeof(parseInt(i)) === 'number')\r\n        .map((i)=>{\r\n            length++;\r\n            return Math.pow(parseInt(i),3)\r\n        }).reduce((previousValue, currentValue,currentIndex,array)=>previousValue+currentValue)/length;\r\n    console.log(arithmeticalMean);\r\n\r\n    //Question 2\r\n\r\n    let coordinate1 = Object.assign(prompt('Введите первую точку x,y через запятую').split(',')).map((i)=>parseInt(i));\r\n    let coordinate2 = Object.assign(prompt('Введите вторую точку x,y через запятую').split(',').map((i)=>parseInt(i)))\r\n    let coordinate3 = Object.assign(prompt('Введите третью точку x,y через запятую').split(',').map((i)=>parseInt(i)))\r\n    console.log(coordinate1, coordinate2, coordinate3);\r\n\r\n    function trianglePerimeterAndArea(point1, point2, point3) {\r\n        let a = distance(point1, point2);\r\n        let b = distance(point2, point3);\r\n        let c = distance(point3, point1);\r\n\r\n        let p = (a + b + c) / 2;\r\n\r\n        let area = Math.sqrt(p * (p - a) * (p - b) * (p - c));\r\n\r\n        return {\r\n            perimeter: a + b + c,\r\n            area: area\r\n        };\r\n    }\r\n\r\n    function distance(point1, point2) {\r\n        return Math.sqrt(Math.pow(point2[0] - point1[0], 2) + Math.pow(point2[1] - point1[1], 2));\r\n    }\r\n\r\n    console.log(trianglePerimeterAndArea(coordinate1, coordinate2, coordinate3));\r\n\r\n\r\n    //Question 3\r\n    let array = [5,123,43,22,66];\r\n    console.log(array);\r\n    console.log(array.sort((a,b)=>a-b));\r\n\r\n    return (\r\n        <div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Lr3;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}