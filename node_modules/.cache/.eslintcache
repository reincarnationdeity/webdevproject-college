[{"C:\\Users\\reincarndeity\\Documents\\GitHub\\webdevv\\src\\index.js":"1","C:\\Users\\reincarndeity\\Documents\\GitHub\\webdevv\\src\\App.js":"2","C:\\Users\\reincarndeity\\Documents\\GitHub\\webdevv\\src\\router\\Routing.jsx":"3","C:\\Users\\reincarndeity\\Documents\\GitHub\\webdevv\\src\\components\\Navbar.jsx":"4","C:\\Users\\reincarndeity\\Documents\\GitHub\\webdevv\\src\\pages\\Main.jsx":"5","C:\\Users\\reincarndeity\\Documents\\GitHub\\webdevv\\src\\pages\\SelfWork.jsx":"6","C:\\Users\\reincarndeity\\Documents\\GitHub\\webdevv\\src\\pages\\BlockCreate.jsx":"7","C:\\Users\\reincarndeity\\Documents\\GitHub\\webdevv\\src\\pages\\HomeWork.jsx":"8","C:\\Users\\reincarndeity\\Documents\\GitHub\\webdevv\\src\\pages\\LabRab.jsx":"9","C:\\Users\\reincarndeity\\Documents\\GitHub\\webdevv\\src\\pages\\PracticeWork1.jsx":"10","C:\\Users\\reincarndeity\\Documents\\GitHub\\webdevv\\src\\components\\UI\\Blocks\\Blocks.jsx":"11","C:\\Users\\reincarndeity\\Documents\\GitHub\\webdevv\\src\\pages\\LR3.jsx":"12"},{"size":214,"mtime":1674483885402,"results":"13","hashOfConfig":"14"},{"size":358,"mtime":1674159154815,"results":"15","hashOfConfig":"14"},{"size":983,"mtime":1675010033632,"results":"16","hashOfConfig":"14"},{"size":935,"mtime":1675010033655,"results":"17","hashOfConfig":"14"},{"size":295,"mtime":1674159016098,"results":"18","hashOfConfig":"14"},{"size":1514,"mtime":1674161293433,"results":"19","hashOfConfig":"14"},{"size":915,"mtime":1674160048813,"results":"20","hashOfConfig":"14"},{"size":2488,"mtime":1674160264821,"results":"21","hashOfConfig":"14"},{"size":3275,"mtime":1674163050637,"results":"22","hashOfConfig":"14"},{"size":2668,"mtime":1674484348958,"results":"23","hashOfConfig":"14"},{"size":369,"mtime":1674161583863,"results":"24","hashOfConfig":"14"},{"size":1851,"mtime":1675012788770,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"x060pc",{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\reincarndeity\\Documents\\GitHub\\webdevv\\src\\index.js",[],[],"C:\\Users\\reincarndeity\\Documents\\GitHub\\webdevv\\src\\App.js",[],[],"C:\\Users\\reincarndeity\\Documents\\GitHub\\webdevv\\src\\router\\Routing.jsx",[],[],"C:\\Users\\reincarndeity\\Documents\\GitHub\\webdevv\\src\\components\\Navbar.jsx",[],[],"C:\\Users\\reincarndeity\\Documents\\GitHub\\webdevv\\src\\pages\\Main.jsx",[],[],"C:\\Users\\reincarndeity\\Documents\\GitHub\\webdevv\\src\\pages\\SelfWork.jsx",[],[],"C:\\Users\\reincarndeity\\Documents\\GitHub\\webdevv\\src\\pages\\BlockCreate.jsx",[],[],"C:\\Users\\reincarndeity\\Documents\\GitHub\\webdevv\\src\\pages\\HomeWork.jsx",["65"],[],"import React from 'react';\r\nimport cl from '../css/HomeWork.module.css';\r\nimport image from '../images/flowers.svg';\r\n\r\nconst HomeWork = () => {\r\n    return (\r\n        <div className={cl.container}>\r\n            <div className={cl.image_flowers}>\r\n                <img src={image} className={cl.image_flowers}/>\r\n            </div>\r\n            <div >\r\n                <p className={cl.are_invite}>ВЫ ПРИГЛАШЕНЫ? <br/>ПОДТВЕРДИТЕ ВАШЕ<br/> УЧАСТИЕ</p>\r\n            </div>\r\n            <div className={cl.shape}>\r\n                &nbsp;\r\n            </div>\r\n            <div className={cl.shape}>\r\n                &nbsp;\r\n            </div>\r\n            <div>\r\n                <form>\r\n                    <p className={cl.text_about}>Ваше имя:</p>\r\n                    <input type=\"text\" className={cl.text_input}/>\r\n                        <p className={cl.text_about}>Гостей:</p>\r\n                        <select className={cl.options}>\r\n                            <option>\r\n                                1\r\n                            </option>\r\n                            <option>\r\n                                2\r\n                            </option>\r\n                            <option>\r\n                                3\r\n                            </option>\r\n                            <option>\r\n                                4\r\n                            </option>\r\n                        </select>\r\n                        <p className={cl.text_about}>Я приглашен...</p>\r\n                        <select className={[cl.options, cl.second_part].join(' ')}>\r\n                            <option>\r\n                                На все мероприятия\r\n                            </option>\r\n                            <option>\r\n                                На одно мероприятие\r\n                            </option>\r\n                            <option>\r\n                                На два мероприятия\r\n                            </option>\r\n                            <option>\r\n                                На три мероприятия\r\n                            </option>\r\n                        </select>\r\n                    <button type=\"submit\" className={cl.i_apply} onClick={(e)=>e.preventDefault()}>Я ПОДТВЕРЖДАЮ</button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default HomeWork;","C:\\Users\\reincarndeity\\Documents\\GitHub\\webdevv\\src\\pages\\LabRab.jsx",["66"],[],"import React from 'react';\r\nimport cl from '../css/Laboratory.module.css';\r\nimport image1 from '../images/Laboratory/img1.jpg';\r\nimport image2 from '../images/Laboratory/img2.jpg';\r\nimport image3 from '../images/Laboratory/img3.jpg';\r\n\r\nconst LabRab = () => {\r\n    let imagesArray = [image1, image2, image3]\r\n    return (\r\n        <div className={cl.container}>\r\n            <div className={cl.micro__container} style={{backgroundColor: '#FAEBD7'}}>\r\n                <h1>Гаврилюк Никита 22-Д9-3ИНС</h1>\r\n                <h1 style={{textAlign: 'center', fontFamily: 'Times New Roman', fontSize: '25px'}}>«Лабораторная работа №1»</h1>\r\n                <h2 style={{textAlign: 'center', fontFamily: 'Times New Roman', fontSize: '20px'}}>«Работа с основными элементами web-страницы через HTML и CSS.»></h2>\r\n                <p style={{textAlign: 'center', fontFamily: 'Times New Roman', fontSize: '20px'}}>«CSS (Cascading Style Sheets) — язык таблиц стилей, который позволяет прикреплять стиль (например, шрифты и цвет) к структурированным документам (например, документам HTML и приложениям XML). Обычно CSS-стили используются для создания и изменения стиля элементов веб-страниц и пользовательских интерфейсов, написанных на языках HTML и XHTML, но также могут быть применены к любому виду XML-документа, в том числе XML, SVG и XUL. Отделяя стиль представления документов от содержимого документов, CSS упрощает создание веб-страниц и обслуживание сайтов»</p>\r\n            </div>\r\n            <div className={[cl.micro__container, cl.second__container].join(' ')} style={{backgroundColor: '#FFE4E1'}}>\r\n                {imagesArray.map((i, index)=><img className={cl.images} key={index} src={i}/>)}\r\n            </div>\r\n            <div className={cl.micro__container} style={{backgroundColor: '#AFEEEE'}}>\r\n                <form className={cl.form__third}>\r\n                    <p className={cl.headers} style={{marginTop: '0px'}}>Имя</p>\r\n                    <input className={cl.inputs} type=\"text\"/>\r\n                    <p className={cl.headers}>Пароль</p>\r\n                    <input className={cl.inputs} type=\"password\"/>\r\n                    <p className={cl.headers}>Почта</p>\r\n                    <input className={cl.inputs}  type=\"email\"/>\r\n                    <input className={cl.color} type=\"color\"/>\r\n                    <input type={\"file\"} className={cl.inputs} style={{width: '200px', marginTop: '20px'}}/>\r\n                    <p className={cl.headers}>Дата</p>\r\n                    <input type={'date'} />\r\n                    <textarea style={{marginTop: '20px'}}></textarea>\r\n                    <button className={cl.inputs}>Отправить</button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LabRab;","C:\\Users\\reincarndeity\\Documents\\GitHub\\webdevv\\src\\pages\\PracticeWork1.jsx",["67"],[],"import React, {useEffect, useState} from 'react';\r\nimport cl from '../css/PracticeWork1.module.css';\r\n\r\nconst PracticeWork1 = () => {\r\n    const myObject = {};\r\n    const mySecondObject = {a: 1};\r\n    const testMultiply = {\r\n        width: 100,\r\n        height: 300,\r\n        text: 'dsad'\r\n    }\r\n    const [name, setName] = useState('');\r\n    const [color, setColor] = useState('');\r\n    const [choose, setChoose] = useState(true);\r\n    const [captcha, setCaptcha] = useState(false);\r\n\r\n    while(captcha === false){\r\n        let i = prompt(\"Введите число больше 100 но меньше 250\");\r\n        if(i>100 && i<250){\r\n            setCaptcha(true);\r\n            break;\r\n        }\r\n    }\r\n\r\n\r\n    const min = (a, b) => {\r\n        return a<b ? a : b;\r\n    }\r\n\r\n\r\n    const isEven = () =>{\r\n        for(let i = 20; i<45; i++)\r\n        {\r\n            if(i%2 === 0)\r\n             console.log(i);\r\n         }\r\n    }\r\n\r\n    const isEmpty = (obj) => {\r\n        return Object.keys(obj).length === 0 ?  true :  false\r\n    }\r\n\r\n    const multiplyNumeric = (obj) => {\r\n        for(let i in obj){\r\n            if(typeof obj[i] === \"number\"){\r\n                obj[i] = obj[i]*2;\r\n            }\r\n        }\r\n    }\r\n    useEffect(()=>{\r\n        console.log(min(4,5));\r\n        isEven();\r\n        console.log(isEmpty(myObject));\r\n        console.log(isEmpty(mySecondObject));\r\n        multiplyNumeric(testMultiply);\r\n        console.log(testMultiply);\r\n    }, [])\r\n    return (\r\n        <form className={cl.form__container} onSubmit={(e)=>e.preventDefault()}>\r\n            <p className={cl.form__text}>Как тебя зовут?</p>\r\n            <input value={name} onChange={(e)=>setName(e.target.value)} type=\"text\" className={cl.form__input}/>\r\n            <p className={cl.form__text}>Какой твой любимый цвет?</p>\r\n            <input value={color} onChange={(e)=>setColor(e.target.value)} type=\"text\" className={cl.form__input}/>\r\n            <p className={cl.form__text}>Любишь ли ты рисовать?</p>\r\n            { choose\r\n                ? <div className={cl.button__container}><button className={cl.yes__active}>Да</button> <button onClick={()=>setChoose(false)} className={cl.no}>Нет</button></div>\r\n                : <div  className={cl.button__container}><button onClick={()=>setChoose(true)} className={cl.yes}>Да</button><button className={cl.no__active}>Нет</button></div>}\r\n            <button className={cl.submit__button} onClick={()=>alert(\"Name:\" + name + \"\\nColor:\" + color + \"\\nPaint:\" + choose)}>Показать данные</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default PracticeWork1;","C:\\Users\\reincarndeity\\Documents\\GitHub\\webdevv\\src\\components\\UI\\Blocks\\Blocks.jsx",[],[],"C:\\Users\\reincarndeity\\Documents\\GitHub\\webdevv\\src\\pages\\LR3.jsx",["68"],[],{"ruleId":"69","severity":1,"message":"70","line":9,"column":17,"nodeType":"71","endLine":9,"endColumn":64},{"ruleId":"69","severity":1,"message":"70","line":18,"column":46,"nodeType":"71","endLine":18,"endColumn":94},{"ruleId":"72","severity":1,"message":"73","line":57,"column":8,"nodeType":"74","endLine":57,"endColumn":10,"suggestions":"75"},{"ruleId":"76","severity":1,"message":"77","line":3,"column":5,"nodeType":"78","messageId":"79","endLine":3,"endColumn":13},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'myObject', 'mySecondObject', and 'testMultiply'. Either include them or remove the dependency array.","ArrayExpression",["80"],"no-unused-vars","'previosu' is defined but never used.","Identifier","unusedVar",{"desc":"81","fix":"82"},"Update the dependencies array to be: [myObject, mySecondObject, testMultiply]",{"range":"83","text":"84"},[1438,1440],"[myObject, mySecondObject, testMultiply]"]